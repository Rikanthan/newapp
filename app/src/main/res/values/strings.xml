<resources>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="app_name">Cs</string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="large_text">
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Material is the metaphor.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"A material metaphor is the unifying theory of a rationalized space and a system of motion."
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"The material is grounded in tactile reality, inspired by the study of paper and ink, yet "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"technologically advanced and open to imagination and magic.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Surfaces and edges of the material provide visual cues that are grounded in reality. The "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"use of familiar tactile attributes helps users quickly understand affordances. Yet the "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"flexibility of the material creates new affordances that supercede those in the physical "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"world, without breaking the rules of physics.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"The fundamentals of light, surface, and movement are key to conveying how objects move, "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"interact, and exist in space and in relation to each other. Realistic lighting shows "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"seams, divides space, and indicates moving parts.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Bold, graphic, intentional.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"The foundational elements of print based design typography, grids, space, scale, color, "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"and use of imagery guide visual treatments. These elements do far more than please the "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"eye. They create hierarchy, meaning, and focus. Deliberate color choices, edge to edge "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"imagery, large scale typography, and intentional white space create a bold and graphic "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"interface that immerse the user in the experience.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"An emphasis on user actions makes core functionality immediately apparent and provides "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"waypoints for the user.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Motion provides meaning.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Motion respects and reinforces the user as the prime mover. Primary user actions are "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"inflection points that initiate motion, transforming the whole design.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"All action takes place in a single environment. Objects are presented to the user without "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"breaking the continuity of experience even as they transform and reorganize.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Motion is meaningful and appropriate, serving to focus attention and maintain continuity. "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Feedback is subtle yet clear. Transitions are efﬁcient yet coherent.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"3D world.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"The material environment is a 3D space, which means all objects have x, y, and z "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"dimensions. The z-axis is perpendicularly aligned to the plane of the display, with the "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"positive z-axis extending towards the viewer. Every sheet of material occupies a single "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"position along the z-axis and has a standard 1dp thickness.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"On the web, the z-axis is used for layering and not for perspective. The 3D world is "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"emulated by manipulating the y-axis.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Light and shadow.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Within the material environment, virtual lights illuminate the scene. Key lights create "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"directional shadows, while ambient light creates soft shadows from all angles.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Shadows in the material environment are cast by these two light sources. In Android "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"development, shadows occur when light sources are blocked by sheets of material at "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"various positions along the z-axis. On the web, shadows are depicted by manipulating the "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"y-axis only. The following example shows the card with a height of 6dp.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Resting elevation.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"All material objects, regardless of size, have a resting elevation, or default elevation "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"that does not change. If an object changes elevation, it should return to its resting "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"elevation as soon as possible.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Component elevations.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"The resting elevation for a component type is consistent across apps (e.g., FAB elevation "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"does not vary from 6dp in one app to 16dp in another app).\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Components may have different resting elevations across platforms, depending on the depth "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"of the environment (e.g., TV has a greater depth than mobile or desktop).\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Responsive elevation and dynamic elevation offsets.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Some component types have responsive elevation, meaning they change elevation in response "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"to user input (e.g., normal, focused, and pressed) or system events. These elevation "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"changes are consistently implemented using dynamic elevation offsets.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Dynamic elevation offsets are the goal elevation that a component moves towards, relative "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"to the component’s resting state. They ensure that elevation changes are consistent "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"across actions and component types. For example, all components that lift on press have "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"the same elevation change relative to their resting elevation.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Once the input event is completed or cancelled, the component will return to its resting "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"elevation.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Avoiding elevation interference.\n\n"

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Components with responsive elevations may encounter other components as they move between "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"their resting elevations and dynamic elevation offsets. Because material cannot pass "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"through other material, components avoid interfering with one another any number of ways, "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"whether on a per component basis or using the entire app layout.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"On a component level, components can move or be removed before they cause interference. "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"For example, a floating action button (FAB) can disappear or move off screen before a "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"user picks up a card, or it can move if a snackbar appears.\n"
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"On the layout level, design your app layout to minimize opportunities for interference. "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"For example, position the FAB to one side of stream of a cards so the FAB won’t interfere "
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"when a user tries to pick up one of cards.\n\n"
&#160;&#160;&#160;&#160;&#160;&#160;</string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="action_settings">Settings</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_year1semi1">C++ Basic</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_scrolling">Computer science(TCEUSL)</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="arithmetric">#include<p>&#60;
</p>iostream<p>&#62;</p>\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a, b, sum, multipli, subtra, divi, mod;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>Enter first no:<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>Enter second no:<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>b;\n
&#160;&#160;&#160;&#160;&#160;&#160;sum = a+b;\n
&#160;&#160;&#160;&#160;&#160;&#160;multipli = a*b;\n
&#160;&#160;&#160;&#160;&#160;&#160;subtra = a-b;\n
&#160;&#160;&#160;&#160;&#160;&#160;divi = a/b;\n
&#160;&#160;&#160;&#160;&#160;&#160;mod =a%b;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>sum = <p> &#8220;</p><p> &#8810;</p>sum<p> &#8810;</p>endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>multipli = <p> &#8220;</p><p> &#8810;</p>multipli<p> &#8810;</p>endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>subtra = <p> &#8220;</p><p> &#8810;</p>subtra<p> &#8810;</p>endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>divi = <p> &#8220;</p><p> &#8810;</p>divi<p> &#8810;</p>endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>mod = <p> &#8220;</p><p> &#8810;</p>mod<p> &#8810;</p>endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;return 0;\n
}




&#160;&#160;&#160;&#160;&#160;&#160;</string>

    &#160;&#160;&#160;&#160;&#160;&#160;<string name="max">
&#160;&#160;&#160;&#160;&#160;&#160;#include<p>&#60;
</p>iostream<p>&#62;</p>\n
&#160;&#160;&#160;&#160;&#160;&#160;using namespace std;\n
&#160;&#160;&#160;&#160;&#160;&#160;int main()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a;\n
&#160;&#160;&#160;&#160;&#160;&#160;int n=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;int max;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while (n<p>&#60;</p>10)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the numbers<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n=n+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (max<p>&#60;</p>a)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max=a;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>max <p> &#8220;</p><p> &#8810;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
</string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="sum">  #include<p>&#60;
</p>iostream<p>&#62;</p>\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a;\n
&#160;&#160;&#160;&#160;&#160;&#160;int n=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;int sum=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;while (n<p>&#60;</p>10)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the numbers<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;n=n+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (a<p>&#60;</p>0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n=12;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if (a<p>&#62;</p>0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sum=sum+a;\n

&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;  cout<p> &#8810;</p><p> &#8220;</p>sum <p> &#8220;</p><p> &#8810;</p>sum;\n
}\n</string>

    &#160;&#160;&#160;&#160;&#160;&#160;<string name="multi"> #include<p>&#60;
</p>iostream<p>&#62;</p>\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a;\n
&#160;&#160;&#160;&#160;&#160;&#160;int x;\n
&#160;&#160;&#160;&#160;&#160;&#160;int n=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the number to print multiplication table<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;while (n<p>&#60;</p>12)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;n=n+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;x=a*n;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p>a<p> &#8810;</p><p> &#8220;</p>*<p> &#8220;</p><p> &#8810;</p>n<p> &#8810;</p><p> &#8220;</p>=<p> &#8220;</p><p> &#8810;</p>x<p> &#8810;</p>endl;\n

&#160;&#160;&#160;&#160;&#160;&#160;}\n
}\n</string>

    &#160;&#160;&#160;&#160;&#160;&#160;<string name="prime">
 #include<p>&#60;
</p>iostream<p>&#62;</p>\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int count=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;int a,n;\n
&#160;&#160;&#160;&#160;&#160;&#160;n=1;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the number=<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;while (n<p>&#60;
</p>=a)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(a%n==0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;count=count+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n=n+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;if(count==2)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>it is a prime number<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>it is not a prime number<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
}\n
</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="factorial">
 #include<p>&#60;
</p>iostream<p>&#62;</p>\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a;\n
&#160;&#160;&#160;&#160;&#160;&#160;int n=1;\n
&#160;&#160;&#160;&#160;&#160;&#160;int b=1;\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the number<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;while (n<p>&#60;
</p>=a)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b=n*b;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n=n+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p>b;\n
}\n
</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="checksign">
#include<p>&#60;
</p>iostream<p>&#62;</p>\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the no<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;if (a==0)\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>Zero<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;else if (a<p>&#62;</p>0)\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>possitive<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>negative<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;return 0;\n
}\n
</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="checkmax">
&#160;&#160;&#160;&#160;&#160;&#160;#include<p>&#60;
</p>iostream<p>&#62;</p>\n
&#160;&#160;&#160;&#160;&#160;&#160;using namespace std;\n
&#160;&#160;&#160;&#160;&#160;&#160;int main()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a,b,c;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the first no<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the second no<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>b;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the third no<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>c;\n
&#160;&#160;&#160;&#160;&#160;&#160;if (a<p>&#62;</p>b&#38;&#38;a<p>&#62;</p>c)\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>first no is maximum<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;else if (b<p>&#62;</p>a&#38;&#38;b<p>&#62;</p>c)\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>second no is maximum<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;else \n

&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>third no is maximum<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="checkrighttriangle">
#include<p>&#60;
</p>iostream<p>&#62;</p>\n
using namespace std;\n
int main()\n
{\n

&#160;&#160;&#160;&#160;&#160;&#160;int a,b,c;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the first length<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>a;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the second length<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>b;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>enter the third length<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin<p> &#8811;</p>c;\n
&#160;&#160;&#160;&#160;&#160;&#160;if ((a*a)==(b*b)+(c*c))\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>right triangle<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;else if ((b*b)==(a*a)+(c*c))\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>right triangle<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if ((c*c)==(a*a)+(b*b))\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;cout<p> &#8810;</p><p> &#8220;</p>right triangle<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;cout <p> &#8810;</p><p> &#8220;</p>not right triangle<p> &#8220;</p>;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;return 0;\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
}
</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="insertion">
 #include&#60;
iostream&#62;\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a[10]={1,2,4,5,6,87,46,23,1995,65},i;\n
&#160;&#160;&#160;&#160;&#160;&#160;for (i=0;i&#60;10;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810; &#8220;number is &#8220; &#8810;a[i] &#8810;&#8220; and &#8220; &#8810;&#8220;index is &#8220; &#8810;i+1 &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
\n
}

</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="reverse">
 #include&#60;
iostream&#62;\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char ch[10]={&#8217;a&#8217;,&#8217;v&#8217;,&#8217;c&#8217;,&#8217;q&#8217;,&#8217;m&#8217;,&#8217;n&#8217;,&#8217;o&#8217;,&#8217;p&#8217;,&#8217;r&#8217;,&#8217;s&#8217;};\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (int b=0;b &#60;10;b++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;ch[b] &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;&#8220;reverse order is\n&#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;for (int b=9;b &#62;=0;b--)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;ch[b] &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}\n
</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="max_min">
 #include&#60;
iostream&#62;\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int num[10],i;\n
&#160;&#160;&#160;&#160;&#160;&#160;int sum=0, max=0, min;\n
&#160;&#160;&#160;&#160;&#160;&#160;float avg;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;&#8220;enter the 10 numbers = &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;for (i=0;i &#60;10;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cin&#8811;num[i];\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;for (i=0;i &#60;10;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sum=sum+num[i];&#160;&#160;&#160;&#160;&#160;&#160;\n&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;avg=sum/10;\n
&#160;&#160;&#160;&#160;&#160;&#160;max=num[0];\n
&#160;&#160;&#160;&#160;&#160;&#160;min=num[0];\n
&#160;&#160;&#160;&#160;&#160;&#160;for (i=0;i &#60;10;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (max &#60;num[i])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max=num[i];\n
\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if(min>num[i])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;min=num[i];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; \n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;&#8220;sum is =&#8220; &#8810;sum &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;&#8220;average is=&#8220; &#8810;avg &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;&#8220;maximum is =&#8220; &#8810;max &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;&#8220;minimum is =&#8220; &#8810;min &#8810;endl;\n
}\n

</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="square">
#include&#60;
iostream&#62;\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int alfha[50],i,m,n;\n
&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;while (i &#60;25)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alfha[i]=i*i;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i=i+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;while (i &#60;50)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alfha[i]=3*i;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i=i+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;for(n=0;n &#60;50;n=n+10)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; { \n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;   for(m=n;m &#60;n+10;m++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;   {\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;alfha[m] &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 0;\n
}\n

</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="search">
#include&#60;
iostream&#62;\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int m=0,i;\n
&#160;&#160;&#160;&#160;&#160;&#160;double b[20]={2.2,5.6,1.1,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3.1,3.2,3.5,4.5,9.5,6.7,6.8,7.5,8.8,9.1};
\n&#160;&#160;&#160;&#160;&#160;&#160;double j;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810; &#8220;enter the number=  &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin&#8811;j;\n
&#160;&#160;&#160;&#160;&#160;&#160;for (i=0;i &#60;20;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (b[i]==j)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m=m+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;if (m==0)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810; &#8220;not found &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;else \n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810; &#8220;Number is there &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}\n

</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="palindrome">
 #include&#60;
iostream&#62;\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int q,count=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;char m[100];\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810; &#8220;enter the number= &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;cin&#8811;m;\n
&#160;&#160;&#160;&#160;&#160;&#160;q=strlen(m);\n
&#160;&#160;&#160;&#160;&#160;&#160;
for (int c=0;c &#60;q;c++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (int b=q;b &#62;=0;b--)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;  if(m[b]==m[c])\n
&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;count=count+1;\n
&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160; }\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;if (count==q)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810; &#8220;not palindrome &#8220;;
\n
    &#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;else \n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810; &#8220;palindrome &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}
</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="ascending">
#include&#60;
iostream&#62;\n
using namespace std;\n
int main()\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int mynum[10],n,m,tmp;\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810; &#8220;enter the 10 numbers = \n &#8220;;
\n&#160;&#160;&#160;&#160;&#160;&#160;while (n&#60;10)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160; cin&#8811;mynum[n];\n
&#160;&#160;&#160;&#160;&#160;&#160; n=n+1;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;for (n=0;n&#60;10;n++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (m=0;m&#60;9;m++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(mynum[m]&#62;mynum[m+1])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp=mynum[m];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mynum[m]=mynum[m+1];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mynum[m+1]=tmp;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810; &#8220;ascending order is &#8220; &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;for (n=0;n&#60;10;n++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &#8810;mynum[n] &#8810;endl;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}\n

</string>

    &#160;&#160;&#160;&#160;&#160;&#160;<string name="insert_a">
import java.util.*;\n
public class insert\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a[]=new int[5];//we declaring 5 elements in array\n
&#160;&#160;&#160;&#160;&#160;&#160;Scanner sc=new Scanner(System.in);\n

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i&#60;5;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a[i]=sc.nextInt();//we get input from user
\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i&#60;5;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(a[i]);//we print array\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n

&#160;&#160;&#160;&#160;&#160;&#160;}\n
}\n

</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="arraysearch">
import java.util.Scanner;\n
public class arraysearch\n
{\n
public static void main(String args[])\n
{\n
int a[]= {4,56,15,42,96};\n
int bb;\n
int c=1;\n
System.out.println(&#8220;enter the number&#8220;);\n
Scanner b= new Scanner(System.in);\n
bb = b.nextInt();.\n
for(int i=0;i&#60;5;i++)\n
{\n

if(bb==a[i])\n
{\n
 c=c+1;\n
}\n
}\n
 if (c==2)\n
{\n
 System.out.println(&#8220;element is there&#8220;);\n
}\n
else\n
{
System.out.println(&#8220;element is not there&#8220;);\n
}\n
}\n
}\n

</string>

    &#160;&#160;&#160;&#160;&#160;&#160;<string name="duplicate">


public class duplicate\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a[]= {4,56,60,61,15,42,96};\n
&#160;&#160;&#160;&#160;&#160;&#160;int c=1;\n
&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i&#60;7;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int j=i+1;j&#60;7;j++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(a[j]==a[i])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c=c+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160; if (c==2)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160; System.out.println(&#8220;element is there&#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;else \n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(&#8220;element is not there&#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}


</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="common1">

public class common1\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;int a[]= {4,56,60,61,15,42,96};\n
&#160;&#160;&#160;&#160;&#160;&#160;int b[]= {12,55,26,42,48,65,24};\n
&#160;&#160;&#160;&#160;&#160;&#160;int c=1;\n
&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i&#60;7;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int j=0;j&#60;7;j++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(a[i]==b[j])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c=c+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
 &#160;&#160;&#160;&#160;&#160;&#160;System.out.println(c);\n
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c==2)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(&#8220;common element is there&#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else \n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(&#8220;common element is not there&#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}



</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="common2">


public class common2\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;String a[]= {&#8220;5&#8220;,&#8220;6&#8220;,&#8220;b&#8220;,&#8220;61&#8220;,&#8220;a&#8220;,&#8220;42&#8220;,&#8220;96&#8220;};
\n&#160;&#160;&#160;&#160;&#160;&#160;String b[]= {&#8220;12&#8220;,&#8220;55&#8220;,&#8220;26&#8220;,&#8220;b&#8220;,&#8220;48&#8220;,&#8220;65&#8220;,&#8220;a&#8220;};
\n&#160;&#160;&#160;&#160;&#160;&#160;int c=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i&#60;7;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int j=0;j&#60;7;j++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(a[i]==b[j])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c=c+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
 &#160;&#160;&#160;&#160;&#160;&#160;System.out.println(c);\n
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (c==0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(&#8220;common element is not there&#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else \n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(c);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(&#8220;common element is  there&#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}

</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="queue">
public class qu\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int rear=-1;\n
&#160;&#160;&#160;&#160;&#160;&#160;int front=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;int size=5;\n
&#160;&#160;&#160;&#160;&#160;&#160;int que[]=new int[size];\n
&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;public void enqueue(int elt)\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rear=rear+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;que[rear]=elt;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;public int dequeue()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int t=que[front];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;front=front+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return(t);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;public boolean isEmpty()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return(front==size);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;public boolean isFull()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return(rear==size-1);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}


</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="testqueue">
import java.util.Scanner;\n
public class testq\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scanner sc=new Scanner(System.in);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;qu p=new qu();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while(!p.isFull())\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int ele=sc.nextInt();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p.enqueue(ele);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println( &#8220;elements are &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while (!p.isEmpty())\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(p.dequeue());\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
}\n
}

</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="qupalin">
&#160;&#160;&#160;&#160;&#160;&#160;import java.util.Scanner;\n
public class qpal\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n

&#160;&#160;&#160;&#160;&#160;&#160;  Scanner sc = new Scanner(System.in);\n
&#160;&#160;&#160;&#160;&#160;&#160;  System.out.println( &#8220;enter the string &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;  String s=sc.next();\n
&#160;&#160;&#160;&#160;&#160;&#160;   que p1 = new qpal();\n
&#160;&#160;&#160;&#160;&#160;&#160;   for (int i=0;i&#60;s.length();i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;   {\n
&#160;&#160;&#160;&#160;&#160;&#160;   char ch= s.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;   p1.enqueue(ch);\n
&#160;&#160;&#160;&#160;&#160;&#160;   }\n
&#160;&#160;&#160;&#160;&#160;&#160;   String rev= &#8220; &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;   while (!p1.isEmpty())\n
&#160;&#160;&#160;&#160;&#160;&#160;   {\n
&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;   rev=rev+p1.dequeue();\n
&#160;&#160;&#160;&#160;&#160;&#160;   }\n
&#160;&#160;&#160;&#160;&#160;&#160;   if(s.equals(rev))\n
&#160;&#160;&#160;&#160;&#160;&#160;   {\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;   System.out.println( &#8220; palindrome &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;   }\n
&#160;&#160;&#160;&#160;&#160;&#160;   else\n
&#160;&#160;&#160;&#160;&#160;&#160;   {\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;   System.out.println( &#8220;not palindrome &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;   }\n
&#160;&#160;&#160;&#160;&#160;&#160;   }\n
}

</string>

    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<string name="single">
\u0020
public class linkedlist\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;Node head;\n
&#160;&#160;&#160;&#160;&#160;&#160;public linkedlist()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;this.head=null;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;public class Node\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;public int data;\n
&#160;&#160;&#160;&#160;&#160;&#160;public Node next;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public Node(int data1,Node next1)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;this.data=data1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;this.next=next1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;public void addfront(int data)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;head=new Node(data,head);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public void addlast(int data)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Node curNode=head;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Node temp=new Node(data,null);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while(curNode.next!=null)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;curNode=curNode.next;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;curNode.next=temp;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public void print()\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Node curNode=head;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while(curNode!=null)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(curNode.data);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;curNode=curNode.next;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;linkedlist list1=new linkedlist();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.addfront(6);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.addfront(9);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.addfront(1);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.addlast(8);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.addlast(5);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.addfront(1);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.addlast(8);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.addlast(5);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.addfront(1);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;list1.print();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</string>

    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<string name="circularqueue">
public class cqu\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int rear=-1;\n
&#160;&#160;&#160;&#160;&#160;&#160;int front=-1;\n
&#160;&#160;&#160;&#160;&#160;&#160;int size=5;\n
&#160;&#160;&#160;&#160;&#160;&#160;int que[]=new int[size];\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;public void enqueue(int elt)\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rear = (rear + 1) % que.length;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;que[rear]=elt;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;public int dequeue()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(front ==-1)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;front=front+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if(front==rear)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;front=-1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rear=-1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int t=que[front];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;front=(front+1)%que.length;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return(t);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return dequeue;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;public boolean isEmpty()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return(front==size);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;public boolean isFull()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if((rear == size-1) &#38; (front==-1))\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return false;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return(rear==size-1);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}
</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="tree">
class Node\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int key;\n
&#160;&#160;&#160;&#160;&#160;&#160;Node left, right;\n

&#160;&#160;&#160;&#160;&#160;&#160;public Node(int item)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key = item;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;right = left = null;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}\n

class BinaryTree\n
{\n

&#160;&#160;&#160;&#160;&#160;&#160;Node root;\n
&#160;&#160;&#160;&#160;&#160;&#160;BinaryTree(int key)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root = new Node(key);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n

&#160;&#160;&#160;&#160;&#160;&#160;BinaryTree()\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root = null;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n

\n
\n
	void printPostorder(Node node)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (node == null)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printPostorder(node.left);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printPostorder(node.right)\n;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(node.key +  &#8220;  &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n

\n

&#160;&#160;&#160;&#160;&#160;&#160;void printPreorder(Node node)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (node == null)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(node.key +  &#8220;  &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printPreorder(node.left);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printPreorder(node.right);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
	\n

	  void printInorder(Node node)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (node == null)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printInorder(node.left);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(node.key +  &#8220;  &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printInorder(node.right);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n

	\n
	void printPostorder() \n
	{&#160;&#160;&#160;&#160;&#160;&#160;\n
	printPostorder(root);\n
	}\n
	void printPreorder()  \n
	{  \n
	printPreorder(root); \n
	}\n
&#160;&#160;&#160;&#160;&#160;&#160;void printInorder()   \n
	{&#160;&#160;&#160;&#160;&#160;&#160; \n
	printInorder(root); \n
	}\n


 \n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String[] args)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BinaryTree tree = new BinaryTree();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree.root = new Node(44);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree.root.left = new Node(17);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree.root.right = new Node(78);\n
		tree.root.left.right = new Node(32);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree.root.right.right = new Node(88);\n
		tree.root.right.left = new Node(50);\n
		tree.root.right.left.right = new Node(62);\n
		tree.root.right.left.left = new Node(48);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;   System.out.println( &#8220;post oder is :-  &#8220;);\n
	   tree.printPostorder();\n
	   System.out.println( &#8220; &#8220;);\n
	   System.out.println( &#8220;pre oder is :-  &#8220;);\n
	   tree.printPreorder();\n
	   System.out.println( &#8220; &#8220;);\n
	   System.out.println( &#8220;In oder is :-  &#8220;);\n
	   tree.printInorder();\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}


</string>

    &#160;&#160;&#160;&#160;&#160;&#160;<string name="binarysearch">

import java.util.Scanner;\n
public class BinarySearch\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int binary(int a[],int low, int high, int key)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;boolean b=false;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;while(low&#60;=high)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int mid=(low+high)/2;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(a[mid]&#60;key)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;low=mid+1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if(a[mid]>key)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;high=mid-1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{	\n
&#160;&#160;&#160;&#160;&#160;&#160;return mid;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;return -1;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String[] args)\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;BinarySearch p=new BinarySearch();\n
&#160;&#160;&#160;&#160;&#160;&#160;int arr[]={2, 5, 7, 8, 12, 15, 18, 21, 23, 28, 35, 48, 54, 62};\n
&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(&#8220;Enter your key&#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;Scanner sc=new Scanner(System.in);\n
&#160;&#160;&#160;&#160;&#160;&#160;int key=sc.nextInt();\n
&#160;&#160;&#160;&#160;&#160;&#160;int low=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;int high=arr.length;\n
&#160;&#160;&#160;&#160;&#160;&#160;int result=p.binary(arr,low,high,key);\n
&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(&#8220;Position is &#8220;+result);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}
&#160;&#160;&#160;&#160;&#160;&#160;</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="ceasar">

import java.util.*;\n
public class st\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;public static String s2= &#8220; &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;public static StringBuffer encript(String s1,int shift)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;StringBuffer result=new StringBuffer();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;s1.length();i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int value1=(int)s1.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(Character.isUpperCase(s1.charAt(i)))\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char t=s1.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int p=((t-65+shift)%26)+65;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char p1=(char)p;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result.append(p1);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if(Character.isLowerCase(s1.charAt(i)))\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char t=s1.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int p=((t-97+shift)%26)+97;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char p1=(char)p;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result.append(p1);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String s2=result.toString();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return result;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public static StringBuffer decript(String s2,int shift)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;StringBuffer result1=new StringBuffer();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;s2.length();i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(Character.isUpperCase(s2.charAt(i)))\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int value1=(int)s2.charAt(i)-64;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(value1 &#60;=shift)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char t=(char)((26-(shift-value1))+64);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result1.append(t);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char t=(char)((value1-shift)+64);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result1.append(t);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(Character.isLowerCase(s2.charAt(i)))\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int value1=(int)s2.charAt(i)-96;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(value1 &#60;=shift)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char t=(char)((26-(shift-value1))+96);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result1.append(t);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char t=(char)((value1-shift)+96);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result1.append(t);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return result1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;st r=new st();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scanner sc=new Scanner(System.in);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print( &#8220;Enter the word: &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String s1=sc.next();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(r.encript(s1,4));\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(r.decript( &#8220;Xvmrgs &#8220;,4));\n
&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}\n
</string>\n


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="playfair">\n
import java.util.*;\n
public class matrix\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;public  void encrypt(String key,String word)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;StringBuffer result=new StringBuffer();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int keyarr[]=new int[key.length()];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int arr[]=new int[26+key.length()];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;key.length();i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(Character.isUpperCase(key.charAt(i)))\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keyarr[i]=(int)key.charAt(i)+32;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=(int)key.charAt(i)+32;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keyarr[i]=(int)key.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=(int)key.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int n=97;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=key.length();i &#60;arr.length;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int count=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int j=0;j &#60;key.length();j++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(n==keyarr[j])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;count++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(n==107)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=n;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=n;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(count &#62;0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;arr.length;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(arr[i]==0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print( &#8220; &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result.append((char)arr[i]);\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char mat[][]=new char[5][5];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int t=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String str1=result.toString();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;5;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int j=0;j &#60;5;j++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mat[i][j]=str1.charAt(t);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(str1.charAt(t)+ &#8220;  &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;t++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int start=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int end=1;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int r1=word.length()/2;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int srow[]=new int[r1];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int scol[]=new int[r1];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int erow[]=new int[r1];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int ecol[]=new int[r1];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int i2=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int i3=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i1=0;i1 &#60;r1;i1++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char ss=word.charAt(start);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char en=word.charAt(end);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;5;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int j=0;j &#60;5;j++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if((int)ss==(int)mat[i][j])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;srow[i2]=i;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scol[i2]=j;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i2++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if((int)en==(int)mat[i][j])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;erow[i3]=i;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ecol[i3]=j;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i3++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start=start+2;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end=end+2;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;r1;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(srow[i]==erow[i])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(mat[srow[i]][(scol[i]+1)%5]+ &#8220; &#8220;+mat[erow[i]][(ecol[i]+1)%5]);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if(ecol[i]== scol[i])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(mat[(srow[i]+1)%5][scol[i]]+ &#8220; &#8220;+mat[(erow[i]+1)%5][ecol[i]]);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else \n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(mat[srow[i]][ecol[i]]+ &#8220; &#8220;+mat[erow[i]][scol[i]]);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scanner sc=new Scanner(System.in);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String s[][]=new String[5][5];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println( &#8220;Enter the text &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String s1=sc.nextLine();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println( &#8220;Enter the word &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String s2=sc.nextLine();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;matrix m1=new matrix();\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m1.encrypt(s1,s2);\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}\n

</string>\n


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="key">
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
import java.util.*;\n
public class key1\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;void encrypt(String key,String word)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;StringBuffer result=new StringBuffer();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//String key= &#8220;CamPus &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int keyarr[]=new int[key.length()];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int arr[]=new int[26+key.length()];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;key.length();i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(Character.isUpperCase(key.charAt(i)))\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keyarr[i]=(int)key.charAt(i)+32;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=(int)key.charAt(i)+32;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keyarr[i]=(int)key.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=(int)key.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int n=97;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=key.length();i &#60;arr.length;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int count=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int j=0;j &#60;key.length();j++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(n==keyarr[j])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;count++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//j=key.length();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=n;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(count &#62;0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//System.out.println(count);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//String word= &#8220;trincomalee &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;arr.length;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(arr[i]==0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print( &#8220; &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result.append((char)arr[i]);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//System.out.print((char)arr[i]);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String str1=result.toString();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;word.length();i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int t=(int)word.charAt(i)-97;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(str1.charAt(t));\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void decrypt(String key,String word)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;StringBuffer result=new StringBuffer();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//String key= &#8220;CamPus &#8220;;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int keyarr[]=new int[key.length()];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int arr[]=new int[26+key.length()];\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;key.length();i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(Character.isUpperCase(key.charAt(i)))\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keyarr[i]=(int)key.charAt(i)+32;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=(int)key.charAt(i)+32;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keyarr[i]=(int)key.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=(int)key.charAt(i);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int n=97;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=key.length();i &#60;arr.length;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int count=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int j=0;j &#60;key.length();j++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(n==keyarr[j])\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;count++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//j=key.length();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=n;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(count &#62;0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//System.out.println(count);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[i]=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n++;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;arr.length;i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(arr[i]==0)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print( &#8220; &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result.append((char)arr[i]);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String str1=result.toString();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int count=0;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;word.length();i++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(int j=0;j &#60;str1.length();j++)\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if((int)word.charAt(i)==(int)str1.charAt(j))\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print((char)(j+97));\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n
&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;public static void main(String args[])\n
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scanner sc=new Scanner(System.in);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println( &#8220;Enter the key &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String s1=sc.nextLine();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println( &#8220;Enter the word &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String s2=sc.nextLine();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key1 k=new key1();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;k.encrypt(s1,s2);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println( &#8220;Enter the cypher &#8220;);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;String s3=sc.nextLine();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;k.decrypt(s1,s3);\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n
}\n

</string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="railfence">
import java.util.Scanner;\n
class RailFenceBasic\n
{\n

 &#160;&#160;&#160;&#160;&#160;&#160;int depth;\n



&#160;&#160;&#160;&#160;&#160;&#160;String Encryption(String plainText,int depth)\nthrows Exception
&#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160;int r = depth, len = plainText.length();\n&#160;&#160;&#160;&#160;&#160;&#160;int c = len/depth;\n
	&#160;&#160;&#160;&#160;&#160;&#160;char mat [][] = new char [r][c];\n
	&#160;&#160;&#160;&#160;&#160;&#160;int k=0;\n



	&#160;&#160;&#160;&#160;&#160;&#160; String cipherText= &#8220; &#8220;;\n

	 &#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;c;i++)\n
  &#160;&#160;&#160;&#160;&#160;&#160; {\n
&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;for (int j=0;j &#60;r;j++)\n
  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {\n
&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160; if(k!=len)\n
	&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;  mat [j][i] = plainText.charAt(k++);\n
	 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; else
	 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; mat [j][i]=&#8216;x&#8216;;\n


  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n\n

 &#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;r;i++)\n
  &#160;&#160;&#160;&#160;&#160;&#160; {\n
&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;for (int j=0;j &#60;c;j++)\n
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;  {\n
&#160;&#160;&#160;&#160;&#160;&#160;  cipherText+=mat [i][j];\n

   &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n\n
 &#160;&#160;&#160;&#160;&#160;&#160;  return cipherText;\n
   }\n\n




   String DEcryption(String cipherText,int depth)throws Exception\n
{\n
&#160;&#160;&#160;&#160;&#160;&#160;int r = depth, len = cipherText.length();\n
&#160;&#160;&#160;&#160;&#160;&#160;	int c = len/depth;\n
	&#160;&#160;&#160;&#160;&#160;&#160;char mat [][] = new char [r][c];\n
	&#160;&#160;&#160;&#160;&#160;&#160;int k=0;\n



	&#160;&#160;&#160;&#160;&#160;&#160; String plainText= &#8220; &#8220;;\n

	 &#160;&#160;&#160;&#160;&#160;&#160;for(int i=0;i &#60;r;i++)\n
   &#160;&#160;&#160;&#160;&#160;&#160;{\n
&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;for (int j=0;j &#60;c;j++)\n
   &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n

	&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;  mat [i][j] = cipherText.charAt(k++);\n



  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }\n\n
&#160;&#160;&#160;&#160;&#160;&#160;}\n\n

&#160;&#160;&#160;&#160;&#160;&#160; for(int i=0;i &#60;c;i++)\n
  &#160;&#160;&#160;&#160;&#160;&#160; {\n
&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;for (int j=0;j &#60;r;j++)\n
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;  {\n
&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160; plainText+=mat [j][i];\n

 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;  }\n\n
   &#160;&#160;&#160;&#160;&#160;&#160;}\n\n
  &#160;&#160;&#160;&#160;&#160;&#160; return plainText;\n
   &#160;&#160;&#160;&#160;&#160;&#160;}\n\n

   }\n\n
class RailFence\n
{\n
   public static void main(String args [])\n throws Exception
{\n
  RailFenceBasic rf = new RailFenceBasic();\n
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scanner scn=new Scanner(System.in);\n
&#160;&#160;&#160;&#160;&#160;&#160;				int depth;\n

	&#160;&#160;&#160;&#160;&#160;&#160;			String plainText,cipherText,decryptedText;\n

	&#160;&#160;&#160;&#160;&#160;&#160;			System.out.println( &#8220;enter plain text: &#8220;);\n
	&#160;&#160;&#160;&#160;&#160;&#160;			plainText=scn.nextLine();\n

		&#160;&#160;&#160;&#160;&#160;&#160;		System.out.println(&#8220;enter depth for encryption: &#8220;);\n
		&#160;&#160;&#160;&#160;&#160;&#160;		depth=scn.nextInt();\n

		&#160;&#160;&#160;&#160;&#160;&#160;		cipherText=rf.Encryption(plainText,depth);\n
			&#160;&#160;&#160;&#160;&#160;&#160;	System.out.println( &#8220;Encrypted text is: &#8220;+cipherText);\n

		&#160;&#160;&#160;&#160;&#160;&#160;		}\n
}\n


 </string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="hill">

<codeblock>
import java.util.*;\n
public class hill\n
{\n
 &#160; &#160; &#160; &#160; &#160; &#160;public static void main(String args[])\n
 &#160; &#160; &#160; &#160; &#160; &#160;{\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;Scanner sc=new Scanner(System.in);\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.println("Enter the text");\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;String s1=sc.nextLine();\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int n=s1.length();\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int text[]=new int[n];\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int key[][]=new int[n][n];\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int ciper[]=new int[n];\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int ac[]=new int[n];\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for(int i=0;i&#60;n;i++)\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for(int j=0;j&#160;n;j++)\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; key[i][j]=sc.nextInt();\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for(int i=0;i&#160;n;i++)\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int m;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;if(Character.isUpperCase(s1.charAt(i)))\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;m=(int)s1.charAt(i)-65;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;ac[i]=65;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;else\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;m=(int)s1.charAt(i)-97;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;ac[i]=97;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;text[i]=m;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for(int i=0;i&#160;n;i++)\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{    \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int count=0;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for(int j=0;j&#160;n;j++)\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{    \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;count=(key[i][j]*text[j])+count;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;ciper[i]=count%26;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.println((char)(ciper[i]+ac[i]));\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;} &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160;}\n
} &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160;</codeblock> &#160; &#160; &#160; &#160; &#160; &#160;



</string>

    <string name="stack">
    <codeblock>
public class Stack\n
{\n
       int top=-1,limit=5;\n
      int mS[]=new int[limit];\n
 &#160; &#160; &#160;\n
 &#160; &#160; &#160;public void push(int elt)\n
 &#160; &#160; &#160;{\n
 &#160; &#160; &#160;  top+=1;\n
 &#160; &#160; &#160; mS[top]=elt;\n
 &#160; &#160; &#160;}\n
\n
 &#160; &#160; &#160;public int pop()\n
 &#160; &#160; &#160;{\n
 &#160; &#160; &#160;  int myPopped=mS[top];\n
 &#160; &#160; &#160; top-=1;\n
 &#160; &#160; &#160;return myPopped;\n
 &#160; &#160; &#160;}\n
\n
 &#160; &#160; &#160;public boolean isEmpty()\n
 &#160; &#160; &#160;{\n
 &#160; &#160; &#160; return(top==-1);\n
 &#160; &#160; &#160;}\n
 &#160; &#160; &#160;public boolean isFull()\n
 &#160; &#160; &#160;{\n
 &#160; &#160; &#160;return(top==limit);\n
  &#160; &#160; &#160;}\n
} &#160; &#160; &#160;\n
</codeblock>
    
</string>
    <string name="insertion_sort">
        <codeblock>
class InsertionSort {\n
 &#160; &#160; &#160;\n
 &#160; &#160; &#160;void sort(int arr[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int n = arr.length; \n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int i = 1; i&#60;  n; ++i) { \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int key = arr[i]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int j = i - 1; \n
  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;while (j >= 0 &#38; &#38; arr[j] > key) { \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[j + 1] = arr[j]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;j = j - 1; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[j + 1] = key; \n
 &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160;\n
 &#160; &#160; &#160;static void printArray(int arr[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int n = arr.length; \n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int i = 0; i &#60; n; ++i) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.print(arr[i] + " "); \n

 &#160; &#160; &#160; &#160; &#160; &#160;System.out.println(); \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160;public static void main(String args[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int arr[] = { 12, 11, 13, 5, 6 }; \n

 &#160; &#160; &#160; &#160; &#160; &#160;InsertionSort ob = new InsertionSort();\n
 &#160; &#160; &#160; &#160; &#160; &#160;ob.sort(arr); \n

 &#160; &#160; &#160; &#160; &#160; &#160;printArray(arr); \n
 &#160; &#160; &#160;} \n
}\n
</codeblock>
    </string>
    <string name="selection">
        <codeblock>
 &#160; &#160; &#160;public class SelectionSortExample {  \n
 &#160; &#160; &#160; &#160; &#160; &#160;public static void selectionSort(int[] arr){  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for (int i = 0; i &#60; arr.length - 1; i++)  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int index = i;  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for (int j = i + 1; j &#60; arr.length; j++){ \n 
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;if (arr[j] &#60; arr[index]){ \n 
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;index = j;\n  
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int smallerNumber = arr[index]; \n  
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[index] = arr[i];  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[i] = smallerNumber;  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160; &#160; &#160; &#160;public static void main(String a[]){  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int[] arr1 = {9,14,3,2,43,11,58,22};  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.println("Before Selection Sort");  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for(int i:arr1){  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.print(i+" ");  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.println();  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;selectionSort(arr1);\n 
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.println("After Selection Sort");  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for(int i:arr1){  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.print(i+" "); \n 
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160;}  
	</codeblock>
        
    </string>
    <string name="bubble">
        <codeblock>
 &#160; &#160; &#160;public class BubbleSortExample {  \n
 &#160; &#160; &#160; &#160; &#160; &#160;static void bubbleSort(int[] arr) { \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int n = arr.length; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int temp = 0;  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; for(int i=0; i  &#60;  n; i++){ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; for(int j=1; j  &#60;  (n-i); j++){  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;  if(arr[j-1]  &#62;  arr[j]){ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; temp = arr[j-1]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; arr[j-1] = arr[j]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; arr[j] = temp;  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; }  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; }  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; }  \n
 &#160; &#160; &#160;  \n
 &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160; &#160; &#160; &#160;public static void main(String[] args) {  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int arr[] ={3,60,35,2,45,320,5}; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.println("Array Before Bubble Sort"); \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for(int i=0; i  &#60;  arr.length; i++){  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.print(arr[i] + " ");\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.println();  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;bubbleSort(arr);\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.println("Array After Bubble Sort"); \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;for(int i=0; i  &#60;  arr.length; i++){  \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.print(arr[i] + " "); \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;}  \n
 &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160;} \n
 </codeblock>
    </string>

    <string name="heap">
         <codeblock>
public class HeapSort \n
{ \n
 &#160; &#160; &#160;public void sort(int arr[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int n = arr.length; \n

 &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int i = n / 2 - 1; i  &#62; = 0; i--) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;heapify(arr, n, i); \n

 &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int i=n-1; i &#62; =0; i--) \n
 &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int temp = arr[0]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[0] = arr[i]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[i] = temp; \n

 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;heapify(arr, i, 0); \n
 &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160; \n
 &#160; &#160; &#160;void heapify(int arr[], int n, int i) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int largest = i; \n
 &#160; &#160; &#160; &#160; &#160; &#160;int l = 2*i + 1; \n
 &#160; &#160; &#160; &#160; &#160; &#160;int r = 2*i + 2;  \n

 &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160;if (l  &#60;  n &#38;&#38; arr[l]  &#62;  arr[largest]) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;largest = l; \n

 &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160;if (r  &#60;  n &#38;&#38; arr[r]  &#62;  arr[largest]) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;largest = r; \n

 &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160;if (largest != i) \n
 &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int swap = arr[i]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[i] = arr[largest]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[largest] = swap; \n

 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;heapify(arr, n, largest); \n
 &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160; \n
 &#160; &#160; &#160;static void printArray(int arr[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int n = arr.length; \n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int i=0; i &#60; n; ++i) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.print(arr[i]+" "); \n
 &#160; &#160; &#160; &#160; &#160; &#160;System.out.println(); \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160; \n
 &#160; &#160; &#160;public static void main(String args[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int arr[] = {12, 11, 13, 5, 6, 7}; \n
 &#160; &#160; &#160; &#160; &#160; &#160;int n = arr.length; \n

 &#160; &#160; &#160; &#160; &#160; &#160;HeapSort ob = new HeapSort(); \n
 &#160; &#160; &#160; &#160; &#160; &#160;ob.sort(arr); \n

 &#160; &#160; &#160; &#160; &#160; &#160;System.out.println("Sorted array is"); \n
 &#160; &#160; &#160; &#160; &#160; &#160;printArray(arr); \n
 &#160; &#160; &#160;} \n
} \n
</codeblock>
    </string>

    <string name="quick">
     <codeblock>
class QuickSort \n
{ \n
 &#160; &#160; &#160; \n
 &#160; &#160; &#160;int partition(int arr[], int low, int high) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int pivot = arr[high]; \n
 &#160; &#160; &#160; &#160; &#160; &#160;int i = (low-1);  \n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int j=low; j &#60; high; j++) \n
 &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;if (arr[j]  &#60;  pivot) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;i++; \n

 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int temp = arr[i]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[i] = arr[j]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[j] = temp; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160; &#160; &#160; &#160;} \n

 &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160;int temp = arr[i+1]; \n
 &#160; &#160; &#160; &#160; &#160; &#160;arr[i+1] = arr[high]; \n
 &#160; &#160; &#160; &#160; &#160; &#160;arr[high] = temp; \n

 &#160; &#160; &#160; &#160; &#160; &#160;return i+1; \n
 &#160; &#160; &#160;} \n


 &#160; &#160; &#160; \n
 &#160; &#160; &#160;void sort(int arr[], int low, int high) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;if (low  &#60;  high) \n
 &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int pi = partition(arr, low, high); \n

 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;sort(arr, low, pi-1); \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;sort(arr, pi+1, high); \n
 &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160; \n
 &#160; &#160; &#160;static void printArray(int arr[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int n = arr.length; \n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int i=0; i &#60; n; ++i) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.print(arr[i]+" "); \n
 &#160; &#160; &#160; &#160; &#160; &#160;System.out.println(); \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160; \n
 &#160; &#160; &#160;public static void main(String args[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int arr[] = {10, 7, 8, 9, 1, 5}; \n
 &#160; &#160; &#160; &#160; &#160; &#160;int n = arr.length; \n

 &#160; &#160; &#160; &#160; &#160; &#160;QuickSort ob = new QuickSort(); \n
 &#160; &#160; &#160; &#160; &#160; &#160;ob.sort(arr, 0, n-1); \n

 &#160; &#160; &#160; &#160; &#160; &#160;System.out.println("sorted array"); \n
 &#160; &#160; &#160; &#160; &#160; &#160;printArray(arr); \n
 &#160; &#160; &#160;} \n
} \n
</codeblock>

</string>

    <string name="merge">
        <codeblock>
class MergeSort \n
{ \n
 &#160; &#160; &#160;\n
 &#160; &#160; &#160;void merge(int arr[], int l, int m, int r) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160;int n1 = m - l + 1; \n
 &#160; &#160; &#160; &#160; &#160; &#160;int n2 = r - m; \n

 &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160;int L[] = new int [n1]; \n
 &#160; &#160; &#160; &#160; &#160; &#160;int R[] = new int [n2]; \n

 &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int i=0; i &#60; n1; ++i) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;L[i] = arr[l + i]; \n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int j=0; j &#60; n2; ++j) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;R[j] = arr[m + 1+ j]; \n


 &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160;int i = 0, j = 0; \n

 &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160;int k = l; \n
 &#160; &#160; &#160; &#160; &#160; &#160;while (i  &#60;  n1 &#38; &#38; j  &#60;  n2) \n
 &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;if (L[i]  &#60; = R[j]) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[k] = L[i]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;i++; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;else\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[k] = R[j]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;j++; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;k++; \n
 &#160; &#160; &#160; &#160; &#160; &#160;} \n

 &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160;while (i  &#60;  n1) \n
 &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[k] = L[i]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;i++; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;k++; \n
 &#160; &#160; &#160; &#160; &#160; &#160;} \n
\n
 &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160;while (j  &#60;  n2) \n
 &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;arr[k] = R[j]; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;j++; \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;k++; \n
 &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160;\n
 &#160; &#160; &#160;void sort(int arr[], int l, int r) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;if (l  &#60;  r) \n
 &#160; &#160; &#160; &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;int m = (l+r)/2; \n

 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;sort(arr, l, m); \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;sort(arr , m+1, r); \n

 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;\n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;merge(arr, l, m, r); \n
 &#160; &#160; &#160; &#160; &#160; &#160;} \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160;\n
 &#160; &#160; &#160;static void printArray(int arr[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int n = arr.length; \n
 &#160; &#160; &#160; &#160; &#160; &#160;for (int i=0; i &#60; n; ++i) \n
 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.out.print(arr[i] + " "); \n
 &#160; &#160; &#160; &#160; &#160; &#160;System.out.println(); \n
 &#160; &#160; &#160;} \n

 &#160; &#160; &#160;\n
 &#160; &#160; &#160;public static void main(String args[]) \n
 &#160; &#160; &#160;{ \n
 &#160; &#160; &#160; &#160; &#160; &#160;int arr[] = {12, 11, 13, 5, 6, 7}; \n

 &#160; &#160; &#160; &#160; &#160; &#160;System.out.println("Given Array"); \n
 &#160; &#160; &#160; &#160; &#160; &#160;printArray(arr); \n

 &#160; &#160; &#160; &#160; &#160; &#160;MergeSort ob = new MergeSort(); \n
 &#160; &#160; &#160; &#160; &#160; &#160;ob.sort(arr, 0, arr.length-1); \n

 &#160; &#160; &#160; &#160; &#160; &#160;System.out.println("\nSorted array"); \n
 &#160; &#160; &#160; &#160; &#160; &#160;printArray(arr); \n
 &#160; &#160; &#160;} \n
} \n

        </codeblock>
    </string>


    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_arith">Arith</string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_max">Max</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_sum">Sum</string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_multiplicationtable">Multiplication table</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_checkprime">Check prime</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_factorial">Factorial</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_checksign">Check sign</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_checkmax">Check max</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_checkrighttriangle">Check right triangle</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_arr"></string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_insertion">Insertion</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_reverse">Reverse</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_mx">Max min sum avg</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_square">Square</string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_search">Search</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_palindrome">Palindrome</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_ascending">Ascending</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_year1semi2">Data structure(java)</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_array_a">Array</string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_insrt">Insert</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_asearch">search</string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_duplicate">Duplicate</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_common1">Common1</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_common2">Common2</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_queue"></string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_que">Queue</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_testq">Test queue</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_qpal">Queue palindrome</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_linkedlist"></string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_single">Single Linked list</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_cqu">Circular queue</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_tree">Binary tree</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_binarysearch">Binary search</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_srch"></string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_year3semi1">Year3semi1</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_datasecurity"></string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_ceasar">Ceasar cipher</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_key">key</string> &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_playfair">playfair cipher</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_hill">Hill cypher</string>
    &#160;&#160;&#160;&#160;&#160;&#160;<string name="title_activity_rail">Railfence cypher</string>
    <string name="title_activity_stack">stack</string>
    <string name="title_activity_sorting">sorting</string>
    <string name="title_activity_selection">selection</string>
    <string name="title_activity_insertion_sort">insertion_sort</string>
    <string name="title_activity_bubble">bubble</string>
    <string name="title_activity_merge">merge</string>
    <string name="title_activity_quick">quick</string>
    <string name="title_activity_heap">heap</string>

</resources>
